import mongoose from "mongoose";

const applicationSchema = new mongoose.Schema(
  {
    userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    jobId: { type: mongoose.Schema.Types.ObjectId, ref: "Job", required: true },
    status: {
      type: String,
      enum: ["applied", "under-review", "interviewed", "offered", "rejected", "withdrawn"],
      default: "applied",
    },
    coverLetter: { type: String, default: "" },
    resumeFile: {
      filename: { type: String },
      originalName: { type: String },
      mimetype: { type: String },
      size: { type: Number },
      uploadDate: { type: Date, default: Date.now }
    },
    submittedAt: { type: Date, default: Date.now },
    notes: { type: String, default: "" }, // For recruiter notes
    applicationSource: {
      type: String,
      enum: ["internal", "linkedin", "indeed", "glassdoor", "external"],
      default: "internal"
    },
    externalApplicationData: {
      applicationId: String, // External platform application ID
      platformUrl: String, // URL to external application
      autoApplied: { type: Boolean, default: false },
      applicationStatus: String, // Status from external platform
      platformResponse: String // Response/confirmation from external platform
    },
    screeningAnswers: [{
      question: String,
      answer: mongoose.Schema.Types.Mixed // Can be string, number, boolean, array
    }],
    savedAt: { type: Date }, // When job was saved (if applicable)
    appliedViaAgent: { type: Boolean, default: false }, // Applied using AI agent
    agentMetadata: {
      agentVersion: String,
      confidenceScore: Number,
      matchingScore: Number,
      autoGeneratedCoverLetter: Boolean
    },
    reviewStage: {
      type: String,
      enum: ["pending", "screening", "hr_review", "technical", "final", "offer", "closed"],
      default: "pending"
    },
    feedback: {
      recruiterFeedback: String,
      interviewNotes: [String],
      ratings: {
        technical: Number,
        communication: Number,
        cultureFit: Number,
        overall: Number
      }
    }
  },
  { timestamps: true }
);

export default mongoose.model("Application", applicationSchema);
